---
description:
globs:
alwaysApply: true
---
# 기술 요구 사항 문서 (TRD)

## 1. 기술 요약
- **프로젝트 개요**: 교회 청년부 커뮤니티 MVP 개발을 위해 Next.js 14, TypeScript, Vercel, Supabase, TailwindCSS, Shadcn UI, OpenAI API, Toss Payments 기술 스택을 활용하여 웹 기반 PWA를 구축한다. Supabase Auth를 통해 안전한 인증 시스템을 구축하고, Supabase Storage를 사용하여 파일 업로드 및 관리를 처리한다. Supabase Realtime을 통해 실시간 알림 및 데이터 동기화를 구현한다.
- **핵심 기술 스택**: Next.js 14, TypeScript, Vercel, Supabase, Supabase Auth, Supabase Storage, Supabase Realtime, TailwindCSS, Shadcn UI, OpenAI API, Toss Payments
- **주요 기술 목표**:
    - **성능**: Lighthouse PWA 성능 점수 90점 이상 달성
    - **확장성**: 100명 규모의 트래픽을 안정적으로 처리
    - **안정성**: 안정적인 서비스 운영 및 데이터 무결성 확보
- **주요 기술 가정**:
    - Vercel 플랫폼의 안정적인 호스팅 환경
    - Supabase 서비스의 안정적인 데이터베이스 및 인증 서비스 제공
    - 사용자들의 안정적인 인터넷 연결

## 2. 기술 스택

| 범주             | 기술 / 라이브러리       | 사유 (이 프로젝트에 선택된 이유)                                                                                                                                                                                                                                                                                                                |
| ---------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 프레임워크         | Next.js 14            | 서버 사이드 렌더링 (SSR) 및 정적 사이트 생성 (SSG) 기능을 제공하여 초기 로딩 속도 향상 및 SEO 최적화. App Router를 활용하여 효율적인 라우팅 및 코드 분할.                                                                                                                                                                                                |
| 언어             | TypeScript            | 정적 타입 검사를 통해 코드 안정성 및 유지보수성 향상. 개발 생산성 향상.                                                                                                                                                                                                                                                                         |
| 호스팅           | Vercel                | Next.js에 최적화된 플랫폼으로, 간편한 배포 및 자동 스케일링 기능 제공. PWA 지원 및 CDN 통합.                                                                                                                                                                                                                                                        |
| 데이터베이스       | Supabase              | PostgreSQL 기반의 BaaS (Backend as a Service)로, 실시간 데이터베이스, 인증, 스토리지 기능을 제공하여 개발 속도 향상.                                                                                                                                                                                                                              |
| 인증             | Supabase Auth         | 간편한 인증 및 권한 관리 기능 제공. 소셜 로그인, 이메일/비밀번호 인증 등 다양한 인증 방식 지원.                                                                                                                                                                                                                                                         |
| 스토리지           | Supabase Storage      | 이미지, 파일 등 정적 자산 저장 및 관리 기능 제공. CDN 통합을 통해 빠른 전송 속도 보장.                                                                                                                                                                                                                                                           |
| 실시간 통신        | Supabase Realtime     | 실시간 데이터 동기화 및 알림 기능 제공. WebSocket 기반으로 효율적인 통신 구현.                                                                                                                                                                                                                                                                 |
| UI 프레임워크      | TailwindCSS           | 유틸리티 우선 CSS 프레임워크로, 빠른 UI 개발 및 유지보수 용이. 컴포넌트 재사용성 향상.                                                                                                                                                                                                                                                           |
| UI 컴포넌트 라이브러리 | Shadcn UI             | 재사용 가능한 UI 컴포넌트 제공. TailwindCSS 기반으로 디자인 일관성 유지.                                                                                                                                                                                                                                                                      |
| AI API           | OpenAI API            | (이후 확장 기능) 게시글 요약, 댓글 자동 생성 등에 활용 가능.                                                                                                                                                                                                                                                                                          |
| 결제             | Toss Payments         | (이후 확장 기능) 중고거래 게시판 안전 결제 기능 구현에 사용. 간편 결제 및 다양한 결제 수단 지원.                                                                                                                                                                                                                                                         |

## 3. 시스템 아키텍처 설계

### 최상위 빌딩 블록
- **Frontend (Next.js)**:
    - 사용자 인터페이스 및 사용자 경험을 담당합니다.
    - 컴포넌트 기반 아키텍처로 구성됩니다.
    - 하위 빌딩 블록: UI 컴포넌트, 페이지 라우팅, 상태 관리
- **Backend (Supabase)**:
    - 데이터베이스, 인증, 스토리지, 실시간 통신 기능을 제공합니다.
    - API 엔드포인트를 통해 Frontend와 통신합니다.
    - 하위 빌딩 블록: Supabase Auth, Supabase Storage, Supabase Realtime, PostgreSQL 데이터베이스
- **External APIs (OpenAI, Toss Payments)**:
    - 외부 서비스와의 연동을 담당합니다.
    - OpenAI API를 통해 AI 기능을 제공하고, Toss Payments를 통해 결제 기능을 제공합니다.
    - 하위 빌딩 블록: OpenAI API, Toss Payments API

### 최상위 컴포넌트 상호 작용 다이어그램

```mermaid
graph TD
    A[Frontend (Next.js)] --> B[Backend (Supabase)]
    B --> C[PostgreSQL Database]
    B --> D[Supabase Auth]
    B --> E[Supabase Storage]
    B --> F[Supabase Realtime]
    A --> G[OpenAI API]
    A --> H[Toss Payments API]
```

- **Frontend (Next.js) -> Backend (Supabase)**: 사용자 요청에 따라 API 호출을 통해 데이터 조회, 생성, 수정, 삭제 작업을 수행합니다.
- **Backend (Supabase) -> PostgreSQL Database**: 데이터베이스에 데이터를 저장하고 조회합니다.
- **Backend (Supabase) -> Supabase Auth**: 사용자 인증 및 권한 관리를 처리합니다.
- **Backend (Supabase) -> Supabase Storage**: 파일 업로드 및 다운로드를 처리합니다.
- **Backend (Supabase) -> Supabase Realtime**: 실시간 데이터 동기화 및 알림을 처리합니다.
- **Frontend (Next.js) -> External APIs (OpenAI, Toss Payments)**: 필요에 따라 외부 API를 호출하여 AI 기능 및 결제 기능을 사용합니다.

### 코드 구성 및 규칙

**도메인 기반 구성 전략**
- **도메인 분리**: 사용자 관리, 게시판, 캘린더, 알림 등 비즈니스 도메인별로 코드를 분리합니다.
- **계층 기반 아키텍처**: 프레젠테이션 계층, 비즈니스 로직 계층, 데이터 접근 계층, 인프라 계층으로 분리합니다.
- **기능 기반 모듈**: 관련 기능을 함께 그룹화하여 모듈을 구성합니다.
- **공유 컴포넌트**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트를 별도의 모듈로 분리합니다.

**범용 파일 및 폴더 구조**
```
/
├── components/             # 재사용 가능한 UI 컴포넌트
│   ├── Button.tsx
│   ├── Card.tsx
│   └── ...
├── pages/                  # Next.js 페이지 (라우팅)
│   ├── _app.tsx           # 전역 레이아웃 및 설정
│   ├── index.tsx          # 홈 페이지
│   ├── board/
│   │   ├── [id].tsx      # 게시글 상세 페이지
│   │   └── write.tsx     # 게시글 작성 페이지
│   ├── calendar.tsx       # 캘린더 페이지
│   └── ...
├── utils/                  # 유틸리티 함수
│   ├── api.ts             # API 호출 함수
│   ├── date.ts            # 날짜 관련 함수
│   └── ...
├── types/                  # TypeScript 타입 정의
│   ├── Board.ts
│   ├── User.ts
│   └── ...
├── public/                 # 정적 자산 (이미지, 폰트 등)
│   ├── images/
│   ├── fonts/
│   └── ...
├── styles/                 # 전역 스타일
│   ├── globals.css
│   └── ...
├── .env.local              # 환경 변수
├── next.config.js          # Next.js 설정 파일
└── tsconfig.json           # TypeScript 설정 파일
```

### 데이터 흐름 및 통신 패턴
- **클라이언트-서버 통신**: API 요청/응답 패턴을 사용합니다.
- **데이터베이스 상호 작용**: Supabase 클라이언트를 사용하여 데이터베이스와 상호 작용합니다.
- **외부 서비스 통합**: third-party API를 통합합니다.
- **실시간 통신**: Supabase Realtime을 사용하여 실시간 통신을 구현합니다.
- **데이터 동기화**: 분산된 컴포넌트 간의 일관성 패턴을 사용합니다.

## 4. 성능 및 최적화 전략
- **코드 분할**: Next.js의 Dynamic Import를 사용하여 초기 로딩 속도를 최적화합니다.
- **이미지 최적화**: Next.js의 Image 컴포넌트를 사용하여 이미지 크기 및 형식을 최적화합니다.
- **캐싱**: Vercel의 CDN을 사용하여 정적 자산을 캐싱합니다.
- **데이터베이스 쿼리 최적화**: 필요한 데이터만 조회하도록 쿼리를 최적화합니다.

## 5. 구현 로드맵 및 마일스톤
### 1단계: 기초 (MVP 구현)
- **핵심 인프라**: 기본 시스템 설정 및 기초 컴포넌트 구현
- **필수 기능**: 최소 실행 가능 제품 기능 구현 (게시판 CRUD, 캘린더, 인증)
- **기본 보안**: 기본적인 보안 구현 (Supabase Auth)
- **개발 환경**: 개발 환경 설정 및 CI/CD 기본 설정
- **일정**: 2주

### 2단계: 기능 개선
- **고급 기능**: MVP 이상의 확장 기능 구현 (알림, 권한/역할)
- **성능 최적화**: 시스템 성능 개선
- **보안 강화**: 고급 보안 기능 및 규정 준수 구현
- **모니터링 구현**: 포괄적인 관찰 가능성 설정
- **일정**: 2주

## 6. 위험 평가 및 완화 전략
### 기술적 위험 분석
- **기술 위험**: 잠재적인 기술 문제 및 복잡성 문제
- **성능 위험**: 확장성 및 성능 병목 현상 문제
- **보안 위험**: 잠재적인 보안 취약점 및 공격 벡터
- **통합 위험**: third-party 서비스 종속성 및 실패 지점
- **완화 전략**: 각 식별된 위험을 해결하기 위한 구체적인 접근 방식

### 프로젝트 전달 위험
- **일정 위험**: 개발 일정 문제 및 종속성
- **리소스 위험**: 팀 역량 및 기술 전문성 요구 사항
- **품질 위험**: 코드 품질 및 테스트 범위 문제
- **배포 위험**: 프로덕션 배포 및 환경 문제
- **비상 계획**: 대체 접근 방식 및 백업 전략

